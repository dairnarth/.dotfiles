#!/bin/bash

shopt -s expand_aliases

alias()
{
    [ -z "$2" ] && return
    if type "${2%% *}" &>/dev/null; then
        command alias "$1"="$2"
    elif [ -n "$3" ] && type "${3%% *}" &>/dev/null; then
        command alias "$1"="$3"
    fi
}

# Wrappers
for file in ~/.config/bash/wrappers/*; do
    [[ -f "$file" ]] &&                \
        alias "${file##*/}" "$file"
done
unset file

# Aliases
alias d         doas \
                sudo
alias g         git
alias gv        'cd $HOME/.dotfiles/stow/nvim/.config/nvim/'
alias ls        'exa -aagl --color-scale --group-directories-first' \
                'ls -lah --color=auto --group-directories-first'
alias lt        'exa -glT --color-scale --group-directories-first' \
                tree
alias lta       'exa -aglT --color-scale --group-directories-first' \
                'tree -a'
alias mci       'd make clean install'
alias mkd       'mkdir -pv'
alias nr        notereader
alias p         paru \
                'd pacman'
alias qsynth    'qsynth -a pulseaudio /usr/share/sounds/sf2/FluidR3_GM.sf2'
alias r         ranger
alias ss        setsid
alias v         nvim \
                vim
alias webupdate 'rsync -vrP --delete-after ~/projects/website/ cs@plex.lan:/var/www/html/dylancairns.co.uk/'
alias z         zathura

# Configuration
appconfig()
{
    [[ -z $* ]] && return 1
    local dir="$(pwd)"
    cd "$1"
    nvim -c 'exec exists("g:dairnarth") ? "TelescopeFindGitFiles" : "e ."'
    cd "$dir"
}
alias cdot 'appconfig "$HOME/.dotfiles/"'
alias cv   'appconfig "$HOME/.dotfiles/stow/nvim/.config/nvim/"'

# Functions
abc2pdf()
{
    local abcm2psArgs="-O -"
    local f=0
    local OPTARG
    local OPTIND
    while getopts "fl" arg; do
        case $arg in
            f)  f=1
                ;;
            l)  abcm2psArgs="-lO -"
                ;;
        esac
    done

    for file in "$@"; do
        if [[ "$file" =~ .abc ]]; then
            if [[ $f == 1 ]]; then
                [[ -e "${file%.abc}".pdf ]] && \
                    printf 'File %s already exists.\n' "${file%abc}".pdf && \
                    return 1
                abcm2ps $abcm2psArgs "$file" | ps2pdf - > "${file%.abc}".pdf
            else
                abcm2ps $abcm2psArgs "$file" | ps2pdf - | zathura -
            fi
        fi
    done
}
cloud()
{
    local x=0
    local remotes=()
    local OPTARG
    local OPTIND
    while getopts "dox" arg; do
        case $arg in
            d)  remotes+=('dropbox')
                ;;
            o)  remotes+=('onedrive')
                ;;
            x)  local x=1
        esac
    done

    [[ -z $remotes ]] && return 1

    if [[ $x == 1 ]]; then
        for remote in ${remotes[@]}; do
            $(fusermount -u ~/mnt/$remote) && \
                printf '%s unmounted.\n' "${remote^}"
        done
        return
    fi

    for remote in ${remotes[@]}; do
        if $(rclone listremotes | grep $remote &>/dev/null); then
            rclone mount --daemon "$remote": ~/mnt/$remote
            printf '%s mounted to "~/mnt/%s".\n' "${remote^}" "$remote"
        else
            printf '%s is not configured in rclone.\n' "${remote^}" >&2
        fi
    done
}
diff() { command diff -u "$@" | diff-so-fancy | bat; }
mcd() { mkdir -p "$1" && cd "$1"; }
notereader()
{
    local readme=''
    local hline=''
    if [[ -e "./Readme.md" ]]; then
        readme='./Readme.md'
        hline='./.tmp.noteReader.hline.md'
        printf '\n---\n' > "$hline"
    fi
    cat "$readme" "$hline" ./notes/*.md > ./.tmp.noteReader.md
    md2pdf -o - ./.tmp.noteReader.md | zathura -
    rm ./.tmp.noteReader.md "$hline"
}

# Translation
if type -P dictd &>/dev/null; then
    enfr()
    {
        [[ -z $* ]] && return 1
        printf '\e[1mEN -> FR\e[0m\n'
        for arg in $@; do
            dict -d fd-eng-fra $arg | sed '1,4d;s/^\ \ //'
        done
    }
    fren()
    {
        [[ -z $* ]] && return 1
        printf '\e[1mFR -> EN\e[0m\n'
        for arg in $@; do
            dict -d fd-fra-eng $arg | sed '1,4d;s/^\ \ //'
        done
    }
fi
